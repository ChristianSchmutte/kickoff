
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Activity
 */

export type Activity = {
  id: number
  title: string
  description: string
  organizerId: number
  locationId: number
  sportId: number
  timestamp: bigint
  ends: bigint
}

/**
 * Model User
 */

export type User = {
  id: number
  firstname: string
  lastname: string
}

/**
 * Model Sport
 */

export type Sport = {
  id: number
  title: string
}

/**
 * Model Location
 */

export type Location = {
  id: number
  name: string
  latitude: number
  longitude: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Activities
 * const activities = await prisma.activity.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Activities
   * const activities = await prisma.activity.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.sport`: Exposes CRUD operations for the **Sport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sports
    * const sports = await prisma.sport.findMany()
    * ```
    */
  get sport(): Prisma.SportDelegate<GlobalReject>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.22.1
   * Query Engine version: 60cc71d884972ab4e897f0277c4b84383dddaf6c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Activity: 'Activity',
    User: 'User',
    Sport: 'Sport',
    Location: 'Location'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Activity
   */


  export type AggregateActivity = {
    count: ActivityCountAggregateOutputType | null
    avg: ActivityAvgAggregateOutputType | null
    sum: ActivitySumAggregateOutputType | null
    min: ActivityMinAggregateOutputType | null
    max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    id: number | null
    organizerId: number | null
    locationId: number | null
    sportId: number | null
    timestamp: number | null
    ends: number | null
  }

  export type ActivitySumAggregateOutputType = {
    id: number | null
    organizerId: number | null
    locationId: number | null
    sportId: number | null
    timestamp: bigint | null
    ends: bigint | null
  }

  export type ActivityMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    organizerId: number | null
    locationId: number | null
    sportId: number | null
    timestamp: bigint | null
    ends: bigint | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    organizerId: number | null
    locationId: number | null
    sportId: number | null
    timestamp: bigint | null
    ends: bigint | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    title: number
    description: number
    organizerId: number
    locationId: number
    sportId: number
    timestamp: number
    ends: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    id?: true
    organizerId?: true
    locationId?: true
    sportId?: true
    timestamp?: true
    ends?: true
  }

  export type ActivitySumAggregateInputType = {
    id?: true
    organizerId?: true
    locationId?: true
    sportId?: true
    timestamp?: true
    ends?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    organizerId?: true
    locationId?: true
    sportId?: true
    timestamp?: true
    ends?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    organizerId?: true
    locationId?: true
    sportId?: true
    timestamp?: true
    ends?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    organizerId?: true
    locationId?: true
    sportId?: true
    timestamp?: true
    ends?: true
    _all?: true
  }

  export type ActivityAggregateArgs = {
    /**
     * Filter which Activity to aggregate.
    **/
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
    **/
    orderBy?: Enumerable<ActivityOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
    [P in keyof T & keyof AggregateActivity]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }


    
    
  export type ActivityGroupByArgs = {
    where?: ActivityWhereInput
    orderBy?: Enumerable<ActivityOrderByInput>
    by: Array<ActivityScalarFieldEnum>
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ActivityCountAggregateInputType | true
    avg?: ActivityAvgAggregateInputType
    sum?: ActivitySumAggregateInputType
    min?: ActivityMinAggregateInputType
    max?: ActivityMaxAggregateInputType
  }


  export type ActivityGroupByOutputType = {
    id: number
    title: string
    description: string
    organizerId: number
    locationId: number
    sportId: number
    timestamp: bigint
    ends: bigint
    count: ActivityCountAggregateOutputType | null
    avg: ActivityAvgAggregateOutputType | null
    sum: ActivitySumAggregateOutputType | null
    min: ActivityMinAggregateOutputType | null
    max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Promise<Array<
    PickArray<ActivityGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: GetScalarType<T[P], ActivityGroupByOutputType[P]>
    }
  >>
    

  export type ActivitySelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    participants?: boolean | UserFindManyArgs
    organizer?: boolean | UserArgs
    organizerId?: boolean
    location?: boolean | LocationArgs
    locationId?: boolean
    sport?: boolean | SportArgs
    sportId?: boolean
    timestamp?: boolean
    ends?: boolean
  }

  export type ActivityInclude = {
    participants?: boolean | UserFindManyArgs
    organizer?: boolean | UserArgs
    location?: boolean | LocationArgs
    sport?: boolean | SportArgs
  }

  export type ActivityGetPayload<
    S extends boolean | null | undefined | ActivityArgs,
    U = keyof S
      > = S extends true
        ? Activity
    : S extends undefined
    ? never
    : S extends ActivityArgs | ActivityFindManyArgs
    ?'include' extends U
    ? Activity  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'participants'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'organizer'
        ? UserGetPayload<S['include'][P]> :
        P extends 'location'
        ? LocationGetPayload<S['include'][P]> :
        P extends 'sport'
        ? SportGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Activity ?Activity [P]
  : 
          P extends 'participants'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'organizer'
        ? UserGetPayload<S['select'][P]> :
        P extends 'location'
        ? LocationGetPayload<S['select'][P]> :
        P extends 'sport'
        ? SportGetPayload<S['select'][P]> : never
  } 
    : Activity
  : Activity


  type ActivityCountArgs = Merge<
    Omit<ActivityFindManyArgs, 'select' | 'include'> & {
      select?: ActivityCountAggregateInputType | true
    }
  >

  export interface ActivityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActivityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Activity'> extends True ? CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>> : CheckSelect<T, Prisma__ActivityClient<Activity | null >, Prisma__ActivityClient<ActivityGetPayload<T> | null >>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActivityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Activity'> extends True ? CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>> : CheckSelect<T, Prisma__ActivityClient<Activity | null >, Prisma__ActivityClient<ActivityGetPayload<T> | null >>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActivityFindManyArgs>(
      args?: SelectSubset<T, ActivityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Activity>>, PrismaPromise<Array<ActivityGetPayload<T>>>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
    **/
    create<T extends ActivityCreateArgs>(
      args: SelectSubset<T, ActivityCreateArgs>
    ): CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>>

    /**
     * Create many Activities.
     *     @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     *     @example
     *     // Create many Activities
     *     const activity = await prisma.activity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActivityCreateManyArgs>(
      args?: SelectSubset<T, ActivityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
    **/
    delete<T extends ActivityDeleteArgs>(
      args: SelectSubset<T, ActivityDeleteArgs>
    ): CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityUpdateArgs>(
      args: SelectSubset<T, ActivityUpdateArgs>
    ): CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityDeleteManyArgs>(
      args?: SelectSubset<T, ActivityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityUpdateManyArgs>(
      args: SelectSubset<T, ActivityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityUpsertArgs>(
      args: SelectSubset<T, ActivityUpsertArgs>
    ): CheckSelect<T, Prisma__ActivityClient<Activity>, Prisma__ActivityClient<ActivityGetPayload<T>>>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActivityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    participants<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    organizer<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    location<T extends LocationArgs = {}>(args?: Subset<T, LocationArgs>): CheckSelect<T, Prisma__LocationClient<Location | null >, Prisma__LocationClient<LocationGetPayload<T> | null >>;

    sport<T extends SportArgs = {}>(args?: Subset<T, SportArgs>): CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * Throw an Error if a Activity can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Activity to fetch.
    **/
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * Throw an Error if a Activity can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Activity to fetch.
    **/
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
    **/
    orderBy?: Enumerable<ActivityOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
    **/
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
    **/
    distinct?: Enumerable<ActivityScalarFieldEnum>
  }


  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * Filter, which Activities to fetch.
    **/
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
    **/
    orderBy?: Enumerable<ActivityOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
    **/
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
    **/
    skip?: number
    distinct?: Enumerable<ActivityScalarFieldEnum>
  }


  /**
   * Activity create
   */
  export type ActivityCreateArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * The data needed to create a Activity.
    **/
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }


  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs = {
    data: Enumerable<ActivityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Activity update
   */
  export type ActivityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * The data needed to update a Activity.
    **/
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
    **/
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs = {
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    where?: ActivityWhereInput
  }


  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * The filter to search for the Activity to update in case it exists.
    **/
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
    **/
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }


  /**
   * Activity delete
   */
  export type ActivityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
    /**
     * Filter which Activity to delete.
    **/
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs = {
    where?: ActivityWhereInput
  }


  /**
   * Activity without action
   */
  export type ActivityArgs = {
    /**
     * Select specific fields to fetch from the Activity
    **/
    select?: ActivitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ActivityInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UserCountAggregateInputType | true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<Array<
    PickArray<UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UserGroupByOutputType))]: GetScalarType<T[P], UserGroupByOutputType[P]>
    }
  >>
    

  export type UserSelect = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    friends?: boolean | UserFindManyArgs
    friendsRelation?: boolean | UserFindManyArgs
    activites?: boolean | ActivityFindManyArgs
    organizedActivities?: boolean | ActivityFindManyArgs
  }

  export type UserInclude = {
    friends?: boolean | UserFindManyArgs
    friendsRelation?: boolean | UserFindManyArgs
    activites?: boolean | ActivityFindManyArgs
    organizedActivities?: boolean | ActivityFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'friends'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'friendsRelation'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'activites'
        ? Array < ActivityGetPayload<S['include'][P]>>  :
        P extends 'organizedActivities'
        ? Array < ActivityGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'friends'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'friendsRelation'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'activites'
        ? Array < ActivityGetPayload<S['select'][P]>>  :
        P extends 'organizedActivities'
        ? Array < ActivityGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    friends<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    friendsRelation<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    activites<T extends ActivityFindManyArgs = {}>(args?: Subset<T, ActivityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Activity>>, PrismaPromise<Array<ActivityGetPayload<T>>>>;

    organizedActivities<T extends ActivityFindManyArgs = {}>(args?: Subset<T, ActivityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Activity>>, PrismaPromise<Array<ActivityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Sport
   */


  export type AggregateSport = {
    count: SportCountAggregateOutputType | null
    avg: SportAvgAggregateOutputType | null
    sum: SportSumAggregateOutputType | null
    min: SportMinAggregateOutputType | null
    max: SportMaxAggregateOutputType | null
  }

  export type SportAvgAggregateOutputType = {
    id: number | null
  }

  export type SportSumAggregateOutputType = {
    id: number | null
  }

  export type SportMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type SportMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type SportCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type SportAvgAggregateInputType = {
    id?: true
  }

  export type SportSumAggregateInputType = {
    id?: true
  }

  export type SportMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type SportMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type SportCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type SportAggregateArgs = {
    /**
     * Filter which Sport to aggregate.
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
    **/
    orderBy?: Enumerable<SportOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sports
    **/
    count?: true | SportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SportMaxAggregateInputType
  }

  export type GetSportAggregateType<T extends SportAggregateArgs> = {
    [P in keyof T & keyof AggregateSport]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSport[P]>
      : GetScalarType<T[P], AggregateSport[P]>
  }


    
    
  export type SportGroupByArgs = {
    where?: SportWhereInput
    orderBy?: Enumerable<SportOrderByInput>
    by: Array<SportScalarFieldEnum>
    having?: SportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: SportCountAggregateInputType | true
    avg?: SportAvgAggregateInputType
    sum?: SportSumAggregateInputType
    min?: SportMinAggregateInputType
    max?: SportMaxAggregateInputType
  }


  export type SportGroupByOutputType = {
    id: number
    title: string
    count: SportCountAggregateOutputType | null
    avg: SportAvgAggregateOutputType | null
    sum: SportSumAggregateOutputType | null
    min: SportMinAggregateOutputType | null
    max: SportMaxAggregateOutputType | null
  }

  type GetSportGroupByPayload<T extends SportGroupByArgs> = Promise<Array<
    PickArray<SportGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof SportGroupByOutputType))]: GetScalarType<T[P], SportGroupByOutputType[P]>
    }
  >>
    

  export type SportSelect = {
    id?: boolean
    title?: boolean
    activites?: boolean | ActivityFindManyArgs
  }

  export type SportInclude = {
    activites?: boolean | ActivityFindManyArgs
  }

  export type SportGetPayload<
    S extends boolean | null | undefined | SportArgs,
    U = keyof S
      > = S extends true
        ? Sport
    : S extends undefined
    ? never
    : S extends SportArgs | SportFindManyArgs
    ?'include' extends U
    ? Sport  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'activites'
        ? Array < ActivityGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Sport ?Sport [P]
  : 
          P extends 'activites'
        ? Array < ActivityGetPayload<S['select'][P]>>  : never
  } 
    : Sport
  : Sport


  type SportCountArgs = Merge<
    Omit<SportFindManyArgs, 'select' | 'include'> & {
      select?: SportCountAggregateInputType | true
    }
  >

  export interface SportDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sport that matches the filter.
     * @param {SportFindUniqueArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sport'> extends True ? CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>> : CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>

    /**
     * Find the first Sport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindFirstArgs} args - Arguments to find a Sport
     * @example
     * // Get one Sport
     * const sport = await prisma.sport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sport'> extends True ? CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>> : CheckSelect<T, Prisma__SportClient<Sport | null >, Prisma__SportClient<SportGetPayload<T> | null >>

    /**
     * Find zero or more Sports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sports
     * const sports = await prisma.sport.findMany()
     * 
     * // Get first 10 Sports
     * const sports = await prisma.sport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sportWithIdOnly = await prisma.sport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SportFindManyArgs>(
      args?: SelectSubset<T, SportFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sport>>, PrismaPromise<Array<SportGetPayload<T>>>>

    /**
     * Create a Sport.
     * @param {SportCreateArgs} args - Arguments to create a Sport.
     * @example
     * // Create one Sport
     * const Sport = await prisma.sport.create({
     *   data: {
     *     // ... data to create a Sport
     *   }
     * })
     * 
    **/
    create<T extends SportCreateArgs>(
      args: SelectSubset<T, SportCreateArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Create many Sports.
     *     @param {SportCreateManyArgs} args - Arguments to create many Sports.
     *     @example
     *     // Create many Sports
     *     const sport = await prisma.sport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SportCreateManyArgs>(
      args?: SelectSubset<T, SportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sport.
     * @param {SportDeleteArgs} args - Arguments to delete one Sport.
     * @example
     * // Delete one Sport
     * const Sport = await prisma.sport.delete({
     *   where: {
     *     // ... filter to delete one Sport
     *   }
     * })
     * 
    **/
    delete<T extends SportDeleteArgs>(
      args: SelectSubset<T, SportDeleteArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Update one Sport.
     * @param {SportUpdateArgs} args - Arguments to update one Sport.
     * @example
     * // Update one Sport
     * const sport = await prisma.sport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SportUpdateArgs>(
      args: SelectSubset<T, SportUpdateArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Delete zero or more Sports.
     * @param {SportDeleteManyArgs} args - Arguments to filter Sports to delete.
     * @example
     * // Delete a few Sports
     * const { count } = await prisma.sport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SportDeleteManyArgs>(
      args?: SelectSubset<T, SportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sports
     * const sport = await prisma.sport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SportUpdateManyArgs>(
      args: SelectSubset<T, SportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sport.
     * @param {SportUpsertArgs} args - Arguments to update or create a Sport.
     * @example
     * // Update or create a Sport
     * const sport = await prisma.sport.upsert({
     *   create: {
     *     // ... data to create a Sport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sport we want to update
     *   }
     * })
    **/
    upsert<T extends SportUpsertArgs>(
      args: SelectSubset<T, SportUpsertArgs>
    ): CheckSelect<T, Prisma__SportClient<Sport>, Prisma__SportClient<SportGetPayload<T>>>

    /**
     * Count the number of Sports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportCountArgs} args - Arguments to filter Sports to count.
     * @example
     * // Count the number of Sports
     * const count = await prisma.sport.count({
     *   where: {
     *     // ... the filter for the Sports we want to count
     *   }
     * })
    **/
    count<T extends SportCountArgs>(
      args?: Subset<T, SportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SportAggregateArgs>(args: Subset<T, SportAggregateArgs>): PrismaPromise<GetSportAggregateType<T>>

    /**
     * Group by Sport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SportGroupByArgs['orderBy'] }
        : { orderBy?: SportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSportGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SportClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    activites<T extends ActivityFindManyArgs = {}>(args?: Subset<T, ActivityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Activity>>, PrismaPromise<Array<ActivityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sport findUnique
   */
  export type SportFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * Throw an Error if a Sport can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sport to fetch.
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport findFirst
   */
  export type SportFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * Throw an Error if a Sport can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sport to fetch.
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
    **/
    orderBy?: Enumerable<SportOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sports.
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sports.
    **/
    distinct?: Enumerable<SportScalarFieldEnum>
  }


  /**
   * Sport findMany
   */
  export type SportFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * Filter, which Sports to fetch.
    **/
    where?: SportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sports to fetch.
    **/
    orderBy?: Enumerable<SportOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sports.
    **/
    cursor?: SportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sports from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sports.
    **/
    skip?: number
    distinct?: Enumerable<SportScalarFieldEnum>
  }


  /**
   * Sport create
   */
  export type SportCreateArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * The data needed to create a Sport.
    **/
    data: XOR<SportCreateInput, SportUncheckedCreateInput>
  }


  /**
   * Sport createMany
   */
  export type SportCreateManyArgs = {
    data: Enumerable<SportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sport update
   */
  export type SportUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * The data needed to update a Sport.
    **/
    data: XOR<SportUpdateInput, SportUncheckedUpdateInput>
    /**
     * Choose, which Sport to update.
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport updateMany
   */
  export type SportUpdateManyArgs = {
    data: XOR<SportUpdateManyMutationInput, SportUncheckedUpdateManyInput>
    where?: SportWhereInput
  }


  /**
   * Sport upsert
   */
  export type SportUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * The filter to search for the Sport to update in case it exists.
    **/
    where: SportWhereUniqueInput
    /**
     * In case the Sport found by the `where` argument doesn't exist, create a new Sport with this data.
    **/
    create: XOR<SportCreateInput, SportUncheckedCreateInput>
    /**
     * In case the Sport was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<SportUpdateInput, SportUncheckedUpdateInput>
  }


  /**
   * Sport delete
   */
  export type SportDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
    /**
     * Filter which Sport to delete.
    **/
    where: SportWhereUniqueInput
  }


  /**
   * Sport deleteMany
   */
  export type SportDeleteManyArgs = {
    where?: SportWhereInput
  }


  /**
   * Sport without action
   */
  export type SportArgs = {
    /**
     * Select specific fields to fetch from the Sport
    **/
    select?: SportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SportInclude | null
  }



  /**
   * Model Location
   */


  export type AggregateLocation = {
    count: LocationCountAggregateOutputType | null
    avg: LocationAvgAggregateOutputType | null
    sum: LocationSumAggregateOutputType | null
    min: LocationMinAggregateOutputType | null
    max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    latitude: number
    longitude: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type LocationAggregateArgs = {
    /**
     * Filter which Location to aggregate.
    **/
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
    **/
    orderBy?: Enumerable<LocationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
    [P in keyof T & keyof AggregateLocation]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }


    
    
  export type LocationGroupByArgs = {
    where?: LocationWhereInput
    orderBy?: Enumerable<LocationOrderByInput>
    by: Array<LocationScalarFieldEnum>
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: LocationCountAggregateInputType | true
    avg?: LocationAvgAggregateInputType
    sum?: LocationSumAggregateInputType
    min?: LocationMinAggregateInputType
    max?: LocationMaxAggregateInputType
  }


  export type LocationGroupByOutputType = {
    id: number
    name: string
    latitude: number
    longitude: number
    count: LocationCountAggregateOutputType | null
    avg: LocationAvgAggregateOutputType | null
    sum: LocationSumAggregateOutputType | null
    min: LocationMinAggregateOutputType | null
    max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Promise<Array<
    PickArray<LocationGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof LocationGroupByOutputType))]: GetScalarType<T[P], LocationGroupByOutputType[P]>
    }
  >>
    

  export type LocationSelect = {
    id?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    activites?: boolean | ActivityFindManyArgs
  }

  export type LocationInclude = {
    activites?: boolean | ActivityFindManyArgs
  }

  export type LocationGetPayload<
    S extends boolean | null | undefined | LocationArgs,
    U = keyof S
      > = S extends true
        ? Location
    : S extends undefined
    ? never
    : S extends LocationArgs | LocationFindManyArgs
    ?'include' extends U
    ? Location  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'activites'
        ? Array < ActivityGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Location ?Location [P]
  : 
          P extends 'activites'
        ? Array < ActivityGetPayload<S['select'][P]>>  : never
  } 
    : Location
  : Location


  type LocationCountArgs = Merge<
    Omit<LocationFindManyArgs, 'select' | 'include'> & {
      select?: LocationCountAggregateInputType | true
    }
  >

  export interface LocationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LocationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Location'> extends True ? CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>> : CheckSelect<T, Prisma__LocationClient<Location | null >, Prisma__LocationClient<LocationGetPayload<T> | null >>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LocationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Location'> extends True ? CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>> : CheckSelect<T, Prisma__LocationClient<Location | null >, Prisma__LocationClient<LocationGetPayload<T> | null >>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocationFindManyArgs>(
      args?: SelectSubset<T, LocationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Location>>, PrismaPromise<Array<LocationGetPayload<T>>>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
    **/
    create<T extends LocationCreateArgs>(
      args: SelectSubset<T, LocationCreateArgs>
    ): CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>>

    /**
     * Create many Locations.
     *     @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const location = await prisma.location.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationCreateManyArgs>(
      args?: SelectSubset<T, LocationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
    **/
    delete<T extends LocationDeleteArgs>(
      args: SelectSubset<T, LocationDeleteArgs>
    ): CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationUpdateArgs>(
      args: SelectSubset<T, LocationUpdateArgs>
    ): CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationDeleteManyArgs>(
      args?: SelectSubset<T, LocationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationUpdateManyArgs>(
      args: SelectSubset<T, LocationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
    **/
    upsert<T extends LocationUpsertArgs>(
      args: SelectSubset<T, LocationUpsertArgs>
    ): CheckSelect<T, Prisma__LocationClient<Location>, Prisma__LocationClient<LocationGetPayload<T>>>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LocationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    activites<T extends ActivityFindManyArgs = {}>(args?: Subset<T, ActivityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Activity>>, PrismaPromise<Array<ActivityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * Throw an Error if a Location can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Location to fetch.
    **/
    where: LocationWhereUniqueInput
  }


  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * Throw an Error if a Location can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Location to fetch.
    **/
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
    **/
    orderBy?: Enumerable<LocationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
    **/
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
    **/
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * Location findMany
   */
  export type LocationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * Filter, which Locations to fetch.
    **/
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
    **/
    orderBy?: Enumerable<LocationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
    **/
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
    **/
    skip?: number
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * Location create
   */
  export type LocationCreateArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * The data needed to create a Location.
    **/
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }


  /**
   * Location createMany
   */
  export type LocationCreateManyArgs = {
    data: Enumerable<LocationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Location update
   */
  export type LocationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * The data needed to update a Location.
    **/
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
    **/
    where: LocationWhereUniqueInput
  }


  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs = {
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    where?: LocationWhereInput
  }


  /**
   * Location upsert
   */
  export type LocationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * The filter to search for the Location to update in case it exists.
    **/
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
    **/
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }


  /**
   * Location delete
   */
  export type LocationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
    /**
     * Filter which Location to delete.
    **/
    where: LocationWhereUniqueInput
  }


  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs = {
    where?: LocationWhereInput
  }


  /**
   * Location without action
   */
  export type LocationArgs = {
    /**
     * Select specific fields to fetch from the Location
    **/
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LocationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActivityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    organizerId: 'organizerId',
    locationId: 'locationId',
    sportId: 'sportId',
    timestamp: 'timestamp',
    ends: 'ends'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SportScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type SportScalarFieldEnum = (typeof SportScalarFieldEnum)[keyof typeof SportScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ActivityWhereInput = {
    AND?: Enumerable<ActivityWhereInput>
    OR?: Enumerable<ActivityWhereInput>
    NOT?: Enumerable<ActivityWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    participants?: UserListRelationFilter
    organizer?: XOR<UserRelationFilter, UserWhereInput>
    organizerId?: IntFilter | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    locationId?: IntFilter | number
    sport?: XOR<SportRelationFilter, SportWhereInput>
    sportId?: IntFilter | number
    timestamp?: BigIntFilter | bigint | number
    ends?: BigIntFilter | bigint | number
  }

  export type ActivityOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    organizerId?: SortOrder
    locationId?: SortOrder
    sportId?: SortOrder
    timestamp?: SortOrder
    ends?: SortOrder
  }

  export type ActivityWhereUniqueInput = {
    id?: number
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    organizerId?: IntWithAggregatesFilter | number
    locationId?: IntWithAggregatesFilter | number
    sportId?: IntWithAggregatesFilter | number
    timestamp?: BigIntWithAggregatesFilter | bigint | number
    ends?: BigIntWithAggregatesFilter | bigint | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    friends?: UserListRelationFilter
    friendsRelation?: UserListRelationFilter
    activites?: ActivityListRelationFilter
    organizedActivities?: ActivityListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstname?: StringWithAggregatesFilter | string
    lastname?: StringWithAggregatesFilter | string
  }

  export type SportWhereInput = {
    AND?: Enumerable<SportWhereInput>
    OR?: Enumerable<SportWhereInput>
    NOT?: Enumerable<SportWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    activites?: ActivityListRelationFilter
  }

  export type SportOrderByInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type SportWhereUniqueInput = {
    id?: number
  }

  export type SportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SportScalarWhereWithAggregatesInput>
    OR?: Enumerable<SportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SportScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
  }

  export type LocationWhereInput = {
    AND?: Enumerable<LocationWhereInput>
    OR?: Enumerable<LocationWhereInput>
    NOT?: Enumerable<LocationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    latitude?: FloatFilter | number
    longitude?: FloatFilter | number
    activites?: ActivityListRelationFilter
  }

  export type LocationOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type LocationWhereUniqueInput = {
    id?: number
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LocationScalarWhereWithAggregatesInput>
    OR?: Enumerable<LocationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LocationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    latitude?: FloatWithAggregatesFilter | number
    longitude?: FloatWithAggregatesFilter | number
  }

  export type ActivityCreateInput = {
    title: string
    description: string
    timestamp: bigint | number
    ends: bigint | number
    participants?: UserCreateNestedManyWithoutActivitesInput
    organizer: UserCreateNestedOneWithoutOrganizedActivitiesInput
    location: LocationCreateNestedOneWithoutActivitesInput
    sport: SportCreateNestedOneWithoutActivitesInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    locationId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
    participants?: UserUpdateManyWithoutActivitesInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedActivitiesInput
    location?: LocationUpdateOneRequiredWithoutActivitesInput
    sport?: SportUpdateOneRequiredWithoutActivitesInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityCreateManyInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    locationId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserCreateInput = {
    firstname: string
    lastname: string
    friends?: UserCreateNestedManyWithoutFriendsRelationInput
    friendsRelation?: UserCreateNestedManyWithoutFriendsInput
    activites?: ActivityCreateNestedManyWithoutParticipantsInput
    organizedActivities?: ActivityCreateNestedManyWithoutOrganizerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    organizedActivities?: ActivityUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type UserUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    friends?: UserUpdateManyWithoutFriendsRelationInput
    friendsRelation?: UserUpdateManyWithoutFriendsInput
    activites?: ActivityUpdateManyWithoutParticipantsInput
    organizedActivities?: ActivityUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    organizedActivities?: ActivityUncheckedUpdateManyWithoutOrganizerInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
  }

  export type UserUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type SportCreateInput = {
    title: string
    activites?: ActivityCreateNestedManyWithoutSportInput
  }

  export type SportUncheckedCreateInput = {
    id?: number
    title: string
    activites?: ActivityUncheckedCreateNestedManyWithoutSportInput
  }

  export type SportUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    activites?: ActivityUpdateManyWithoutSportInput
  }

  export type SportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    activites?: ActivityUncheckedUpdateManyWithoutSportInput
  }

  export type SportCreateManyInput = {
    id?: number
    title: string
  }

  export type SportUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCreateInput = {
    name: string
    latitude: number
    longitude: number
    activites?: ActivityCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    name: string
    latitude: number
    longitude: number
    activites?: ActivityUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    activites?: ActivityUpdateManyWithoutLocationInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    activites?: ActivityUncheckedUpdateManyWithoutLocationInput
  }

  export type LocationCreateManyInput = {
    id?: number
    name: string
    latitude: number
    longitude: number
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type SportRelationFilter = {
    is?: SportWhereInput
    isNot?: SportWhereInput
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedBigIntFilter
    min?: NestedBigIntFilter
    max?: NestedBigIntFilter
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedFloatFilter
    min?: NestedFloatFilter
    max?: NestedFloatFilter
  }

  export type UserCreateNestedManyWithoutActivitesInput = {
    create?: XOR<Enumerable<UserCreateWithoutActivitesInput>, Enumerable<UserUncheckedCreateWithoutActivitesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutActivitesInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutOrganizedActivitiesInput = {
    create?: XOR<UserCreateWithoutOrganizedActivitiesInput, UserUncheckedCreateWithoutOrganizedActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutActivitesInput = {
    create?: XOR<LocationCreateWithoutActivitesInput, LocationUncheckedCreateWithoutActivitesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutActivitesInput
    connect?: LocationWhereUniqueInput
  }

  export type SportCreateNestedOneWithoutActivitesInput = {
    create?: XOR<SportCreateWithoutActivitesInput, SportUncheckedCreateWithoutActivitesInput>
    connectOrCreate?: SportCreateOrConnectWithoutActivitesInput
    connect?: SportWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateManyWithoutActivitesInput = {
    create?: XOR<Enumerable<UserCreateWithoutActivitesInput>, Enumerable<UserUncheckedCreateWithoutActivitesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutActivitesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutActivitesInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutActivitesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutActivitesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutOrganizedActivitiesInput = {
    create?: XOR<UserCreateWithoutOrganizedActivitiesInput, UserUncheckedCreateWithoutOrganizedActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedActivitiesInput
    upsert?: UserUpsertWithoutOrganizedActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrganizedActivitiesInput, UserUncheckedUpdateWithoutOrganizedActivitiesInput>
  }

  export type LocationUpdateOneRequiredWithoutActivitesInput = {
    create?: XOR<LocationCreateWithoutActivitesInput, LocationUncheckedCreateWithoutActivitesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutActivitesInput
    upsert?: LocationUpsertWithoutActivitesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<LocationUpdateWithoutActivitesInput, LocationUncheckedUpdateWithoutActivitesInput>
  }

  export type SportUpdateOneRequiredWithoutActivitesInput = {
    create?: XOR<SportCreateWithoutActivitesInput, SportUncheckedCreateWithoutActivitesInput>
    connectOrCreate?: SportCreateOrConnectWithoutActivitesInput
    upsert?: SportUpsertWithoutActivitesInput
    connect?: SportWhereUniqueInput
    update?: XOR<SportUpdateWithoutActivitesInput, SportUncheckedUpdateWithoutActivitesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedManyWithoutFriendsRelationInput = {
    create?: XOR<Enumerable<UserCreateWithoutFriendsRelationInput>, Enumerable<UserUncheckedCreateWithoutFriendsRelationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFriendsRelationInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutFriendsInput = {
    create?: XOR<Enumerable<UserCreateWithoutFriendsInput>, Enumerable<UserUncheckedCreateWithoutFriendsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFriendsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ActivityCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutParticipantsInput>, Enumerable<ActivityUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutParticipantsInput>
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type ActivityCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutOrganizerInput>, Enumerable<ActivityUncheckedCreateWithoutOrganizerInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutOrganizerInput>
    createMany?: ActivityCreateManyOrganizerInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type ActivityUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutOrganizerInput>, Enumerable<ActivityUncheckedCreateWithoutOrganizerInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutOrganizerInput>
    createMany?: ActivityCreateManyOrganizerInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type UserUpdateManyWithoutFriendsRelationInput = {
    create?: XOR<Enumerable<UserCreateWithoutFriendsRelationInput>, Enumerable<UserUncheckedCreateWithoutFriendsRelationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFriendsRelationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFriendsRelationInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFriendsRelationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFriendsRelationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutFriendsInput = {
    create?: XOR<Enumerable<UserCreateWithoutFriendsInput>, Enumerable<UserUncheckedCreateWithoutFriendsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFriendsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFriendsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFriendsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFriendsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ActivityUpdateManyWithoutParticipantsInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutParticipantsInput>, Enumerable<ActivityUncheckedCreateWithoutParticipantsInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutParticipantsInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutParticipantsInput>
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutParticipantsInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutParticipantsInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityUpdateManyWithoutOrganizerInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutOrganizerInput>, Enumerable<ActivityUncheckedCreateWithoutOrganizerInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutOrganizerInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutOrganizerInput>
    createMany?: ActivityCreateManyOrganizerInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutOrganizerInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutOrganizerInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityUncheckedUpdateManyWithoutOrganizerInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutOrganizerInput>, Enumerable<ActivityUncheckedCreateWithoutOrganizerInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutOrganizerInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutOrganizerInput>
    createMany?: ActivityCreateManyOrganizerInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutOrganizerInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutOrganizerInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityCreateNestedManyWithoutSportInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutSportInput>, Enumerable<ActivityUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutSportInput>
    createMany?: ActivityCreateManySportInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type ActivityUncheckedCreateNestedManyWithoutSportInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutSportInput>, Enumerable<ActivityUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutSportInput>
    createMany?: ActivityCreateManySportInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type ActivityUpdateManyWithoutSportInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutSportInput>, Enumerable<ActivityUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutSportInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutSportInput>
    createMany?: ActivityCreateManySportInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutSportInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutSportInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityUncheckedUpdateManyWithoutSportInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutSportInput>, Enumerable<ActivityUncheckedCreateWithoutSportInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutSportInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutSportInput>
    createMany?: ActivityCreateManySportInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutSportInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutSportInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityCreateNestedManyWithoutLocationInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutLocationInput>, Enumerable<ActivityUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutLocationInput>
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type ActivityUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutLocationInput>, Enumerable<ActivityUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutLocationInput>
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ActivityUpdateManyWithoutLocationInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutLocationInput>, Enumerable<ActivityUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutLocationInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutLocationInput>
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutLocationInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutLocationInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type ActivityUncheckedUpdateManyWithoutLocationInput = {
    create?: XOR<Enumerable<ActivityCreateWithoutLocationInput>, Enumerable<ActivityUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<ActivityCreateOrConnectWithoutLocationInput>
    upsert?: Enumerable<ActivityUpsertWithWhereUniqueWithoutLocationInput>
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: Enumerable<ActivityWhereUniqueInput>
    set?: Enumerable<ActivityWhereUniqueInput>
    disconnect?: Enumerable<ActivityWhereUniqueInput>
    delete?: Enumerable<ActivityWhereUniqueInput>
    update?: Enumerable<ActivityUpdateWithWhereUniqueWithoutLocationInput>
    updateMany?: Enumerable<ActivityUpdateManyWithWhereWithoutLocationInput>
    deleteMany?: Enumerable<ActivityScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedBigIntFilter
    min?: NestedBigIntFilter
    max?: NestedBigIntFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedFloatFilter
    min?: NestedFloatFilter
    max?: NestedFloatFilter
  }

  export type UserCreateWithoutActivitesInput = {
    firstname: string
    lastname: string
    friends?: UserCreateNestedManyWithoutFriendsRelationInput
    friendsRelation?: UserCreateNestedManyWithoutFriendsInput
    organizedActivities?: ActivityCreateNestedManyWithoutOrganizerInput
  }

  export type UserUncheckedCreateWithoutActivitesInput = {
    id?: number
    firstname: string
    lastname: string
    organizedActivities?: ActivityUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type UserCreateOrConnectWithoutActivitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitesInput, UserUncheckedCreateWithoutActivitesInput>
  }

  export type UserCreateWithoutOrganizedActivitiesInput = {
    firstname: string
    lastname: string
    friends?: UserCreateNestedManyWithoutFriendsRelationInput
    friendsRelation?: UserCreateNestedManyWithoutFriendsInput
    activites?: ActivityCreateNestedManyWithoutParticipantsInput
  }

  export type UserUncheckedCreateWithoutOrganizedActivitiesInput = {
    id?: number
    firstname: string
    lastname: string
  }

  export type UserCreateOrConnectWithoutOrganizedActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizedActivitiesInput, UserUncheckedCreateWithoutOrganizedActivitiesInput>
  }

  export type LocationCreateWithoutActivitesInput = {
    name: string
    latitude: number
    longitude: number
  }

  export type LocationUncheckedCreateWithoutActivitesInput = {
    id?: number
    name: string
    latitude: number
    longitude: number
  }

  export type LocationCreateOrConnectWithoutActivitesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutActivitesInput, LocationUncheckedCreateWithoutActivitesInput>
  }

  export type SportCreateWithoutActivitesInput = {
    title: string
  }

  export type SportUncheckedCreateWithoutActivitesInput = {
    id?: number
    title: string
  }

  export type SportCreateOrConnectWithoutActivitesInput = {
    where: SportWhereUniqueInput
    create: XOR<SportCreateWithoutActivitesInput, SportUncheckedCreateWithoutActivitesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutActivitesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutActivitesInput, UserUncheckedUpdateWithoutActivitesInput>
    create: XOR<UserCreateWithoutActivitesInput, UserUncheckedCreateWithoutActivitesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutActivitesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutActivitesInput, UserUncheckedUpdateWithoutActivitesInput>
  }

  export type UserUpdateManyWithWhereWithoutActivitesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    firstname?: StringFilter | string
    lastname?: StringFilter | string
  }

  export type UserUpsertWithoutOrganizedActivitiesInput = {
    update: XOR<UserUpdateWithoutOrganizedActivitiesInput, UserUncheckedUpdateWithoutOrganizedActivitiesInput>
    create: XOR<UserCreateWithoutOrganizedActivitiesInput, UserUncheckedCreateWithoutOrganizedActivitiesInput>
  }

  export type UserUpdateWithoutOrganizedActivitiesInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    friends?: UserUpdateManyWithoutFriendsRelationInput
    friendsRelation?: UserUpdateManyWithoutFriendsInput
    activites?: ActivityUpdateManyWithoutParticipantsInput
  }

  export type UserUncheckedUpdateWithoutOrganizedActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUpsertWithoutActivitesInput = {
    update: XOR<LocationUpdateWithoutActivitesInput, LocationUncheckedUpdateWithoutActivitesInput>
    create: XOR<LocationCreateWithoutActivitesInput, LocationUncheckedCreateWithoutActivitesInput>
  }

  export type LocationUpdateWithoutActivitesInput = {
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type LocationUncheckedUpdateWithoutActivitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type SportUpsertWithoutActivitesInput = {
    update: XOR<SportUpdateWithoutActivitesInput, SportUncheckedUpdateWithoutActivitesInput>
    create: XOR<SportCreateWithoutActivitesInput, SportUncheckedCreateWithoutActivitesInput>
  }

  export type SportUpdateWithoutActivitesInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SportUncheckedUpdateWithoutActivitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutFriendsRelationInput = {
    firstname: string
    lastname: string
    friends?: UserCreateNestedManyWithoutFriendsRelationInput
    activites?: ActivityCreateNestedManyWithoutParticipantsInput
    organizedActivities?: ActivityCreateNestedManyWithoutOrganizerInput
  }

  export type UserUncheckedCreateWithoutFriendsRelationInput = {
    id?: number
    firstname: string
    lastname: string
    organizedActivities?: ActivityUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type UserCreateOrConnectWithoutFriendsRelationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendsRelationInput, UserUncheckedCreateWithoutFriendsRelationInput>
  }

  export type UserCreateWithoutFriendsInput = {
    firstname: string
    lastname: string
    friendsRelation?: UserCreateNestedManyWithoutFriendsInput
    activites?: ActivityCreateNestedManyWithoutParticipantsInput
    organizedActivities?: ActivityCreateNestedManyWithoutOrganizerInput
  }

  export type UserUncheckedCreateWithoutFriendsInput = {
    id?: number
    firstname: string
    lastname: string
    organizedActivities?: ActivityUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type UserCreateOrConnectWithoutFriendsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
  }

  export type ActivityCreateWithoutParticipantsInput = {
    title: string
    description: string
    timestamp: bigint | number
    ends: bigint | number
    organizer: UserCreateNestedOneWithoutOrganizedActivitiesInput
    location: LocationCreateNestedOneWithoutActivitesInput
    sport: SportCreateNestedOneWithoutActivitesInput
  }

  export type ActivityUncheckedCreateWithoutParticipantsInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    locationId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityCreateOrConnectWithoutParticipantsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
  }

  export type ActivityCreateWithoutOrganizerInput = {
    title: string
    description: string
    timestamp: bigint | number
    ends: bigint | number
    participants?: UserCreateNestedManyWithoutActivitesInput
    location: LocationCreateNestedOneWithoutActivitesInput
    sport: SportCreateNestedOneWithoutActivitesInput
  }

  export type ActivityUncheckedCreateWithoutOrganizerInput = {
    id?: number
    title: string
    description: string
    locationId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityCreateOrConnectWithoutOrganizerInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutOrganizerInput, ActivityUncheckedCreateWithoutOrganizerInput>
  }

  export type ActivityCreateManyOrganizerInputEnvelope = {
    data: Enumerable<ActivityCreateManyOrganizerInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutFriendsRelationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFriendsRelationInput, UserUncheckedUpdateWithoutFriendsRelationInput>
    create: XOR<UserCreateWithoutFriendsRelationInput, UserUncheckedCreateWithoutFriendsRelationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFriendsRelationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFriendsRelationInput, UserUncheckedUpdateWithoutFriendsRelationInput>
  }

  export type UserUpdateManyWithWhereWithoutFriendsRelationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFriendsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutFriendsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFriendsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
  }

  export type UserUpdateManyWithWhereWithoutFriendsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFriendsRelationInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
  }

  export type ActivityUpdateManyWithWhereWithoutParticipantsInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutActivitesInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: Enumerable<ActivityScalarWhereInput>
    OR?: Enumerable<ActivityScalarWhereInput>
    NOT?: Enumerable<ActivityScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    organizerId?: IntFilter | number
    locationId?: IntFilter | number
    sportId?: IntFilter | number
    timestamp?: BigIntFilter | bigint | number
    ends?: BigIntFilter | bigint | number
  }

  export type ActivityUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutOrganizerInput, ActivityUncheckedUpdateWithoutOrganizerInput>
    create: XOR<ActivityCreateWithoutOrganizerInput, ActivityUncheckedCreateWithoutOrganizerInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutOrganizerInput, ActivityUncheckedUpdateWithoutOrganizerInput>
  }

  export type ActivityUpdateManyWithWhereWithoutOrganizerInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutOrganizedActivitiesInput>
  }

  export type ActivityCreateWithoutSportInput = {
    title: string
    description: string
    timestamp: bigint | number
    ends: bigint | number
    participants?: UserCreateNestedManyWithoutActivitesInput
    organizer: UserCreateNestedOneWithoutOrganizedActivitiesInput
    location: LocationCreateNestedOneWithoutActivitesInput
  }

  export type ActivityUncheckedCreateWithoutSportInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    locationId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityCreateOrConnectWithoutSportInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutSportInput, ActivityUncheckedCreateWithoutSportInput>
  }

  export type ActivityCreateManySportInputEnvelope = {
    data: Enumerable<ActivityCreateManySportInput>
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutSportInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutSportInput, ActivityUncheckedUpdateWithoutSportInput>
    create: XOR<ActivityCreateWithoutSportInput, ActivityUncheckedCreateWithoutSportInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutSportInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutSportInput, ActivityUncheckedUpdateWithoutSportInput>
  }

  export type ActivityUpdateManyWithWhereWithoutSportInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutActivitesInput>
  }

  export type ActivityCreateWithoutLocationInput = {
    title: string
    description: string
    timestamp: bigint | number
    ends: bigint | number
    participants?: UserCreateNestedManyWithoutActivitesInput
    organizer: UserCreateNestedOneWithoutOrganizedActivitiesInput
    sport: SportCreateNestedOneWithoutActivitesInput
  }

  export type ActivityUncheckedCreateWithoutLocationInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityCreateOrConnectWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput>
  }

  export type ActivityCreateManyLocationInputEnvelope = {
    data: Enumerable<ActivityCreateManyLocationInput>
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutLocationInput, ActivityUncheckedUpdateWithoutLocationInput>
    create: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutLocationInput, ActivityUncheckedUpdateWithoutLocationInput>
  }

  export type ActivityUpdateManyWithWhereWithoutLocationInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutActivitesInput>
  }

  export type UserUpdateWithoutActivitesInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    friends?: UserUpdateManyWithoutFriendsRelationInput
    friendsRelation?: UserUpdateManyWithoutFriendsInput
    organizedActivities?: ActivityUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateWithoutActivitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    organizedActivities?: ActivityUncheckedUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityCreateManyOrganizerInput = {
    id?: number
    title: string
    description: string
    locationId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type UserUpdateWithoutFriendsRelationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    friends?: UserUpdateManyWithoutFriendsRelationInput
    activites?: ActivityUpdateManyWithoutParticipantsInput
    organizedActivities?: ActivityUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateWithoutFriendsRelationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    organizedActivities?: ActivityUncheckedUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateManyWithoutFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutFriendsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    friendsRelation?: UserUpdateManyWithoutFriendsInput
    activites?: ActivityUpdateManyWithoutParticipantsInput
    organizedActivities?: ActivityUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateWithoutFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    organizedActivities?: ActivityUncheckedUpdateManyWithoutOrganizerInput
  }

  export type UserUncheckedUpdateManyWithoutFriendsRelationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
    organizer?: UserUpdateOneRequiredWithoutOrganizedActivitiesInput
    location?: LocationUpdateOneRequiredWithoutActivitesInput
    sport?: SportUpdateOneRequiredWithoutActivitesInput
  }

  export type ActivityUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityUncheckedUpdateManyWithoutActivitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityUpdateWithoutOrganizerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
    participants?: UserUpdateManyWithoutActivitesInput
    location?: LocationUpdateOneRequiredWithoutActivitesInput
    sport?: SportUpdateOneRequiredWithoutActivitesInput
  }

  export type ActivityUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityUncheckedUpdateManyWithoutOrganizedActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityCreateManySportInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    locationId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityUpdateWithoutSportInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
    participants?: UserUpdateManyWithoutActivitesInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedActivitiesInput
    location?: LocationUpdateOneRequiredWithoutActivitesInput
  }

  export type ActivityUncheckedUpdateWithoutSportInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ActivityCreateManyLocationInput = {
    id?: number
    title: string
    description: string
    organizerId: number
    sportId: number
    timestamp: bigint | number
    ends: bigint | number
  }

  export type ActivityUpdateWithoutLocationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
    participants?: UserUpdateManyWithoutActivitesInput
    organizer?: UserUpdateOneRequiredWithoutOrganizedActivitiesInput
    sport?: SportUpdateOneRequiredWithoutActivitesInput
  }

  export type ActivityUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    sportId?: IntFieldUpdateOperationsInput | number
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    ends?: BigIntFieldUpdateOperationsInput | bigint | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}